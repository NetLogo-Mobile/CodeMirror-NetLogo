const GalapagoTests = [
  [
    'patches-own [ heat ]\n\nto setup\n  clear-all\n  set-default-shape turtles "circle"\n  create-turtles num-turtles   ; each turtle is like a heat source\n  [ setxy random-xcor random-ycor     ; position the turtles randomly\n    hide-turtle   ; so we don\'t see the turtles themselves, just the heat they produce\n    set heat turtle-heat ] ; turtles set the patch variable\n  recolor-patches                       ; color patches according to heat\n  reset-ticks\nend\n\nto go\n  ask turtles [ set heat turtle-heat ]   ; turtles set the patch variable\n  if wander? [ ask turtles [ wander ] ]  ; movement of turtles is controlled by WANDER? switch\n  diffuse heat diffusion-rate            ; this causes the "spreading" of heat\n  recolor-patches                        ; color patches according to heat\n  tick\nend\n\nto wander ; turtle procedure\n  rt random 50 - random 50\n  fd turtle-speed\nend\n\nto recolor-patches  ;; color patches according to heat\n  ask patches [ set pcolor heat ]\nend\n\n\n; Copyright 1997 Uri Wilensky.\n; See Info tab for full copyright and license.\n',
    ['diffusion-rate', 'num-turtles', 'wander?', 'turtle-heat', 'turtle-speed'],
  ],
  [
    'breed [ rockets rocket ]\nbreed [ frags frag ]\n\nglobals [\n  countdown       ; how many ticks to wait before a new salvo of fireworks\n]\n\nturtles-own [\n  col             ; sets color of an explosion particle\n  x-vel           ; x-velocity\n  y-vel           ; y-velocity\n]\n\nrockets-own [\n  terminal-y-vel  ; velocity at which rocket will explode\n]\n\nfrags-own [\n  dim             ; used for fading particles\n]\n\nto setup\n  clear-all\n  set-default-shape turtles "circle"\n  reset-ticks\nend\n\n; This procedure executes the model. If there are no turtles,\n; it will either initiate a new salvo of fireworks by calling\n; INIT-ROCKETS or continue to count down if it hasn\'t reached 0.\n; It then calls PROJECTILE-MOTION, which launches and explodes\n; any currently existing fireworks.\nto go\n  if not any? turtles [\n    ifelse countdown = 0 [\n      init-rockets\n      ; use a higher countdown to get a longer pause when trails are drawn\n      set countdown ifelse-value trails? [ 30 ] [ 10 ]\n    ] [\n      ; count down before launching a new salvo\n      set countdown countdown - 1\n    ]\n  ]\n  ask turtles [ projectile-motion ]\n  tick\nend\n\n; This procedure creates a random number of rockets according to the\n; slider FIREWORKS and sets all the initial values for each firework.\nto init-rockets\n  clear-drawing\n  create-rockets (random max-fireworks) + 1 [\n    setxy random-xcor min-pycor\n    set x-vel ((random-float (2 * initial-x-vel)) - (initial-x-vel))\n    set y-vel ((random-float initial-y-vel) + initial-y-vel * 2)\n    set col one-of base-colors\n    set color (col + 2)\n    set size 2\n    set terminal-y-vel (random-float 4.0) ; at what speed does the rocket explode?\n  ]\nend\n\n; This function simulates the actual free-fall motion of the turtles.\n; If a turtle is a rocket it checks if it has slowed down enough to explode.\nto projectile-motion ; turtle procedure\n  set y-vel (y-vel - (gravity / 5))\n  set heading (atan x-vel y-vel)\n  let move-amount (sqrt ((x-vel ^ 2) + (y-vel ^ 2)))\n  if not can-move? move-amount [ die ]\n  fd (sqrt ((x-vel ^ 2) + (y-vel ^ 2)))\n\n  ifelse (breed = rockets) [\n    if (y-vel < terminal-y-vel) [\n      explode\n      die\n    ]\n  ] [\n    fade\n  ]\nend\n\n; This is where the explosion is created.\n; EXPLODE calls hatch a number of times indicated by the slider FRAGMENTS.\nto explode ; turtle procedure\n  hatch-frags fragments [\n    set dim 0\n    rt random 360\n    set size 1\n    set x-vel (x-vel * .5 + dx + (random-float 2.0) - 1)\n    set y-vel (y-vel * .3 + dy + (random-float 2.0) - 1)\n    ifelse trails?\n      [ pen-down ]\n      [ pen-up ]\n  ]\nend\n\n; This function changes the color of a frag.\n; Each frag fades its color by an amount proportional to FADE-AMOUNT.\nto fade ; frag procedure\n  set dim dim - (fade-amount / 10)\n  set color scale-color col dim -5 .5\n  if (color < (col - 3.5)) [ die ]\nend\n\n\n; Copyright 1998 Uri Wilensky.\n; See Info tab for full copyright and license.\n',
    [
      'trails?',
      'max-fireworks',
      'fragments',
      'initial-x-vel',
      'initial-y-vel',
      'gravity',
      'fade-amount',
    ],
  ],
  [
    'turtles-own [\n  leader    ;; the turtle this turtle is following,\n            ;; or nobody if not following\n  follower  ;; the turtle that is following this turtle,\n            ;; or nobody if not being followed\n]\n\nto setup\n  clear-all\n  create-turtles population\n  [ set color magenta\n    setxy random-xcor random-ycor\n    set leader nobody\n    set follower nobody ]\n  reset-ticks\nend\n\nto go\n  ask turtles\n  [ if leader = nobody\n    [ attach-turtle ] ]\n  ask turtles [ turn-turtle ]\n  ask turtles [ fd 1 ]\n  tick\nend\n\nto attach-turtle  ;; turtle procedure\n  ;; find a random patch to test inside the donut\n  let xd near-radius + random (far-radius - near-radius)\n  let yd near-radius + random (far-radius - near-radius)\n  if random 2 = 0 [ set xd (- xd) ]\n  if random 2 = 0 [ set yd (- yd) ]\n  ;; check for free turtles on that patch\n  let candidate one-of (turtles-at xd yd) with [follower = nobody]\n  ;; if we didn\'t find a suitable turtle, stop\n  if candidate = nobody [ stop ]\n  ;; we\'re all set, so latch on!\n  ask candidate [ set follower myself ]\n  set leader candidate\n  ;; change our color\n  ifelse follower = nobody\n  [ set color lime ]\n  [ set color sky\n    set shape "line" ]\n  ;; change our leader\'s color\n  ask candidate\n  [ ifelse leader = nobody\n    [ set color yellow ]\n    [ set color sky\n      set shape "line" ] ]\nend\n\nto turn-turtle  ;; turtle procedure\n  ;; if we are still unattached...\n  ifelse leader = nobody\n  ;; do a somewhat random glide\n  [ rt random-float waver - random-float waver ]\n  ;; otherwise follow the leader\n  [ face leader ]\nend\n\n\n; Copyright 1998 Uri Wilensky.\n; See Info tab for full copyright and license.\n',
    ['waver', 'far-radius', 'population', 'near-radius'],
  ],
  [
    "extensions [ sound ]\n\nglobals [\n chromosomes ; list of all possible chromosomes\n random-who-list ; keeps a shuffled list for pretty-ness\n generations ; number of generations we've seen\n]\n\nturtles-own [\n  my-chromosomes ; list to hold the chromosomes of a drummer\n  my-velocity ; the (int) velocity value of a drummer\n  my-instrument ; the (string) instrument for that turtle\n  mutation-rate ; variable to control \"reproduction\"\n  hits ; counts the number of drum hits for a turtle across its lifespan\n  hits-since-evolve ; the number of hits since a mutation or evolution\n]\n\nbreed [ low-drums low-drummer ]\nbreed [ med-drums med-drummer ]\nbreed [ high-drums high-drummer ]\n\nto setup\n  clear-all\n  ; Make the view big enough to show 16 rows (each a drummer) and however many 'beats'\n  resize-world 0 ((num-chromosomes * 4) - 1) 0 15\n  set-globals\n  set-initial-turtle-variables\n  reset-ticks\n  update-view\nend\n\n; Procedure to play a pattern with evolution\nto go\n  ask turtles [ play ]\n  ; If we've reached the end of a pattern, do some evolution!\n  if (ticks mod (num-chromosomes * 4) = 0) and (ticks != 0) [\n    set generations generations + 1\n    go-evolve\n  ]\n  update-view\n  tick\n  wait 60 / tempo-bpm / 4   ; This roughly sets tempo\nend\n\n; Procedure to play a pattern without any evolution\nto go-no-evolve\n  ask turtles [ play ]\n  update-view\n  tick\n  wait 60 / tempo-bpm / 4\nend\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; PLAY FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nto play-my-drum ; turtle procedure\n  let temp my-velocity\n  if sound? [\n    if solo? [ ; If you're a soloer, play out! Otherwise, be quiet!\n      ifelse who = soloer [\n        set temp my-velocity + 50\n      ][\n        set temp my-velocity - 50\n      ]\n   ]\n    sound:play-drum my-instrument temp\n  ]\nend\n\nto play ; turtle procedure\n  if item (ticks mod (num-chromosomes * 4)) my-pattern = 1 [\n    play-my-drum\n    set hits hits + 1\n    set hits-since-evolve hits-since-evolve + 1\n  ]\nend\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; END PLAY FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; EVOLUTION FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nto go-evolve\n  ; If there isn't a soloist, ask 2 of each type to evolve\n  ifelse not solo? [\n    ask n-of 2 low-drums [\n      evolve\n    ]\n    ask n-of 2 med-drums [\n      evolve\n    ]\n    ask n-of 2 high-drums [\n      evolve\n    ]\n    ; If a drummer hasn't changed in a while, mutate\n    ask turtles with [hits-since-evolve > hit-limit] [\n      mutate\n      set hits-since-evolve 0\n    ]\n  ][ ; If there is a soloist, do the same, but don't include the soloer\n    ask n-of 2 low-drums with [ who != soloer ] [\n      evolve\n    ]\n    ask n-of 2 med-drums with [ who != soloer ] [\n      evolve\n    ]\n    ask n-of 2 high-drums with [ who != soloer ]  [\n      evolve\n    ]\n\n    ; If a drummer hasn't changed in a while, mutate\n    ask turtles with [ hits-since-evolve > hit-limit and who != soloer ] [\n      mutate\n      set hits-since-evolve 0\n    ]\n  ]\nend\n\nto evolve ; turtle procedure\n  let mate nobody\n  let list-of-fitnesses []\n  let search-fitness 0\n\n  if is-low-drummer? self [\n    set list-of-fitnesses [ fitness ] of other breed\n    set search-fitness select-random-weighted-fitness list-of-fitnesses\n    set mate one-of other breed with [ fitness = search-fitness ]\n  ]\n\n  if is-med-drummer? self [\n    set list-of-fitnesses [ fitness ] of turtles with [ breed != [ breed ] of myself ]\n    set search-fitness select-random-weighted-fitness list-of-fitnesses\n    set mate one-of turtles with [ (breed != [breed] of myself) and (fitness = search-fitness)]\n  ]\n\n  if is-high-drummer? self [\n    set list-of-fitnesses [fitness] of other breed\n    set search-fitness select-random-weighted-fitness list-of-fitnesses\n    set mate one-of other breed with [fitness = search-fitness]\n  ]\n\n  let offspring-chromosomes reproduce-with mate\n\n  ask min-one-of other breed with [who != soloer] [fitness] [\n    set my-chromosomes offspring-chromosomes\n    set hits-since-evolve 0\n  ]\nend\n\n; This is where the basic genetic algorithm comes in\nto-report reproduce-with [ mate ] ; turtle procedure\n  ; The asker is 1st Parent while mate is 2nd parent\n  let her-chromosomes [ my-chromosomes ] of mate\n\n  ; Pick a random cross-over point\n  let crossover-point random length my-chromosomes\n\n  ; Combine the chromosomes\n  let baby-chromosomes sentence (sublist my-chromosomes 0 crossover-point) (sublist her-chromosomes crossover-point length her-chromosomes)\n\n  ; Do a little mutation\n  let mutation-chance 0\n  if is-low-drummer? self [\n    set mutation-chance 50\n  ]\n  if is-med-drummer? self [\n    set mutation-chance 25\n  ]\n  if is-high-drummer? self [\n    set mutation-chance 10\n  ]\n\n  ; Maybe actually mutate\n  if random 100 > mutation-chance [\n    set baby-chromosomes mutate-chromosomes baby-chromosomes\n  ]\n  report baby-chromosomes\nend\n\n\n; FITNESS FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;\n; Dependent on breed, because you can lose fitness or gain fitness by fitting to your particular proclivities\nto-report fitness ; turtle procedure\n  ; Arbitrary 10% window around target density\n  let my-fitness 0\n\n  ; Want to be under the hit-density and be on the downbeats\n  if is-low-drummer? self [\n    set my-fitness downbeat-fitness\n    if my-density-fitness > (hit-density-modifier - 0.1) [\n      set my-fitness my-fitness / 1.5\n    ]\n  ]\n\n  ; Want to be at the hit-density and be on the off-beats\n  if is-med-drummer? self [\n    set my-fitness offbeat-fitness\n    if (my-density-fitness < hit-density-modifier - 0.1) or (my-density-fitness > hit-density-modifier + 0.1) [\n      set my-fitness my-fitness / 2\n    ]\n  ]\n\n  ; Want to be above the hit-density and have lots o' clusters\n  if is-high-drummer? self [\n    set my-fitness offbeat-fitness\n    if my-density-fitness < hit-density-modifier + 0.1 [\n      set my-fitness my-fitness / 2\n    ]\n  ]\n  ; use add 1 smoothing\n  report my-fitness + 1\nend\n\nto-report my-density-fitness ; turtle procedure\n  report sum my-pattern / length my-pattern\nend\n\nto-report cluster-fitness ; turtle procedure\n  ; window size at 3\n  let i 4\n  let cluster-count 0\n  while [i <= length my-pattern] [\n    if (sum sublist my-pattern (i - 4) i) = 3 [\n      set cluster-count cluster-count + 1\n    ]\n  ]\n  ; Lots of clusters relative to the notes I play\n  report cluster-count / sum my-pattern * 100\nend\n\nto-report offbeat-fitness ; turtle procedure\n  let offbeat-count 0\n  foreach range length my-pattern [ i ->\n    if i mod 2 != 0 [\n      if item i my-pattern = 1 [\n        set offbeat-count offbeat-count + 1\n      ]\n    ]\n  ]\n  if offbeat-count = 0 [ report 0 ]\n  ; You want more off-beats and less down-beats\n  report offbeat-count / sum my-pattern * 100\nend\n\nto-report downbeat-fitness ; turtle procedure\n  let downbeat-count 0\n  foreach range length my-pattern [ i ->\n    if i mod 2 = 0 [\n      if item i my-pattern = 1 [\n        set downbeat-count downbeat-count + 1\n      ]\n    ]\n  ]\n\n  if downbeat-count = 0 [ report 0 ]\n  ; In other words, you want lots of downbeats in comparison to your other notes\n  report downbeat-count / sum my-pattern * 100\nend\n\nto mutate ; turtle procedure\n  set my-chromosomes mutate-chromosomes my-chromosomes\nend\n\n; Procedure to mutate a chromosome\nto-report mutate-chromosomes [the-chromosomes]\n  ; basically picks a chromosome, mutates it, returns a new set\n  let new-chromosomes the-chromosomes\n  repeat num-mutations [\n    let temp random num-chromosomes\n    set new-chromosomes replace-item temp new-chromosomes ((round (random-normal (item temp new-chromosomes) mutation-strength)) mod 16)\n  ]\n  report new-chromosomes\nend\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; END EVOLUTION FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; HELPER FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; Converts a set of chromosomes into a binary rhythm pattern\nto-report my-pattern ; turtle Procedure\n  let pattern []\n  foreach my-chromosomes [ n ->\n   set pattern sentence pattern (get-chromosome n)\n  ]\n  report pattern\nend\n\nto set-globals\n  set generations 0\n  set random-who-list range 16\n  ; this is just for looks. we keep a map of who to random-who\n  if shuffle-parts? [\n    set random-who-list shuffle random-who-list\n    set random-who-list shuffle random-who-list\n  ]\n  set chromosomes []\n  ; CHROMOSOME LIBRARY\n  let c0 [0 0 0 0]\n  let c1 [1 0 0 0]  let c2  [0 1 0 0] let c3 [0 0 1 0] let c4 [0 0 0 1]\n  let c5 [1 1 0 0]  let c6  [1 0 1 0] let c7 [1 0 0 1] let c8 [0 1 1 0]\n  let c9 [0 1 0 1]  let c10 [0 0 1 1]\n  let c11 [1 1 1 0] let c12 [1 0 1 1] let c13 [1 1 0 1] let c14 [0 1 1 1]\n  let c15 [1 1 1 1]\n  set chromosomes (list c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15)\nend\n\nto set-initial-turtle-variables\n  create-low-drums 6 [\n    set my-instrument \"Acoustic Bass Drum\"\n    set my-velocity 50\n    set color red\n    set mutation-rate 64\n  ]\n\n  create-med-drums 5 [\n    set my-instrument \"Acoustic Snare\"\n    set color green\n    set my-velocity 50\n    set mutation-rate 32\n  ]\n\n  create-high-drums 5 [\n    set my-instrument \"Closed Hi Hat\"\n    set color blue\n    set my-velocity 100\n    set mutation-rate 16\n  ]\n\n  ask turtles [\n    set my-chromosomes (n-values num-chromosomes [ 1 ])\n    hide-turtle\n    set hits 0\n  ]\nend\n\n; Procedure to update the view (simplified music notation)\nto update-view\n  ask turtles [\n    let column 0\n    let row item who random-who-list\n    foreach my-pattern [ n ->\n      ifelse n = 1 [\n        ifelse solo? and (soloer = who) [\n          ask patch column row [ set pcolor white ]\n        ][\n          ask patch column row [ set pcolor [ color ] of myself ]\n        ]\n      ][\n        ask patch column row [ set pcolor black ]\n      ]\n      set column column + 1\n    ]\n  ]\n  ; color the patches that are currently being played\n  ask patches with [ pxcor = (ticks mod (num-chromosomes * 4)) ] [ set pcolor yellow ]\nend\n\n; Procedure to get a chromosomes pattern from the library\nto-report get-chromosome [ index ]\n  report item index chromosomes\nend\n\n; This is my version of picking a weighted random turtle\nto-report select-random-weighted-fitness [ the-list ]\n  let weighted-list []\n  foreach the-list [ x ->\n    ; add one smoothing\n    foreach range round ((x / sum the-list * 100) + 1) [\n      set weighted-list fput x weighted-list\n    ]\n  ]\n  report item (random length weighted-list) weighted-list\nend\n\n\n; Copyright 2017 Uri Wilensky.\n; See Info tab for full copyright and license.\n",
    [
      'num-chromosomes',
      'shuffle-parts?',
      'hit-density-modifier',
      'sound?',
      'num-mutations',
      'mutation-strength',
      'soloer',
      'solo?',
      'tempo-bpm',
      'hit-limit',
    ],
  ],
  [
    'globals [\n  current-color-sep        ; spread of the colors in the kaleidoscope\n  counter\n]\n\nturtles-own [\n  new?                 ; was the turtle just created?\n  type-a?              ; used when turtles with different behaviors are hatched\n]\n\nto setup\n  clear-all\n  ; some of the patterns assume\n  ; evenly spaced turtles\n  create-ordered-turtles num-turtles\n  ask turtles [\n    pen-down\n    set new? false\n    set type-a? false\n  ]\n  set current-color-sep color-sep\n  set counter 0\n  reset-ticks\nend\n\nto lift-pen\n  ask turtles [\n    if who >= num-turtles [ die ]\n     pen-up\n    ]\n  clear-patches\nend\n\n\nto restore\n  ask turtles [\n    if who >= num-turtles [ die ]\n     pen-down\n    ]\n  clear-patches\nend\n\nto color-shift\n  ifelse shift-direction = "increment"\n    [ set current-color-sep (current-color-sep + (random-float 0.001)) ]\n    [ set current-color-sep (current-color-sep - (random-float 0.001)) ]\nend\n\n; turtles draw circles creating an overall circular design.\nto pattern-1    ; turtle procedure\n  if new? [\n    set color (who / current-color-sep)\n     if follow-turtle? [\n       if who = (50 + num-turtles) [ pen-down ]\n     ]\n     right-circle\n     left-circle\n     die\n  ]\n  if (who mod 10) = 0 [\n    rt direction\n    fd 0.5\n    if (count turtles + 1) <= max-num [\n      hatch 1 [set new? true]\n    ]\n  ]\nend\n\n\n; Turtles draw a combination of hexagons and octagons, Overall shape determined by num-turtles.\nto pattern-2    ; turtle procedure\n  if new? [\n    ifelse type-a? [\n      set color (who / current-color-sep)\n      if follow-turtle? [\n        if who = (60 + num-turtles) [ pen-down ]\n      ]\n      hexagon\n      die\n    ][\n      set color (who / current-color-sep)\n      if follow-turtle? [\n        if who = (50 + num-turtles) [ pen-down ]\n      ]\n      octagon\n      die\n    ]\n  ]\n  ifelse (who mod 2) = 0 [\n    rt 1\n    fd 1\n    if (count turtles + 1) <= max-num [\n      hatch 1 [\n        set new? true\n        set type-a? true\n      ]\n    ]\n  ][\n    lt 1\n    fd 1\n    if (count turtles + 1) <= max-num [\n      hatch 1 [\n        set new? true\n        set type-a? false\n      ]\n    ]\n  ]\nend\n\n; Turtles create only pentagons, slight variations in their origin create the overall effect.\nto pattern-3    ; turtle procedure\n  if new? [\n    set color (who / current-color-sep)\n    if follow-turtle? [\n      if who = (60 + num-turtles) [ pen-down ]\n    ]\n    pentagon\n    die\n  ]\n  if (who mod 5) = 0 [\n    rt direction\n    fd 0.5\n    if (count turtles + 1) <= max-num [\n      hatch 1 [ set new? true ]\n    ]\n  ]\nend\n\n; Turtles draw ninegons and left circles creating an overall circular pattern.\nto pattern-4    ; turtle procedure\n  if new? [\n    ifelse type-a? [\n      set color (who / current-color-sep)\n      if follow-turtle? [\n        if who = (1583 + num-turtles) [ pen-down ]\n        if who = (1087 + num-turtles) [ pen-down ]\n      ]\n      nine-gon\n      die\n    ][\n      set color (who / current-color-sep)\n      if follow-turtle? [\n        if who = (214 + num-turtles) [ pen-down ]\n      ]\n      left-circle\n      die\n    ]\n  ]\n  ifelse (who mod 3) = 0 [\n    rt 1\n    if (count turtles + 1) <= max-num [\n      hatch 1 [\n        set new? true\n        set type-a? true\n      ]\n    ]\n  ][\n    lt 1\n    if (count turtles + 1) <= max-num [\n    hatch 1 [\n      set new? true\n      set type-a? false\n    ]\n  ]\n]\nend\n\n; Turtles draw a left square and then die.\nto pattern-5    ; turtle procedure\n    if new? [\n      set color (who / current-color-sep)\n      if follow-turtle? [\n        if who = (80 + num-turtles) [ pen-down ]\n      ]\n      left-square\n      die\n    ]\n    if (count turtles + 1) <= max-num [\n      hatch 1 [ set new? true ]\n    ]\nend\n\n; Turtles draw several shapes, however overall design remains circular.\nto pattern-6    ; turtle procedure\n  if count turtles > max-num [\n    if who > max-num [ die ]\n     stop\n    ]\n\n  if new? [\n    ifelse type-a? [\n      set color (who / current-color-sep)\n      if follow-turtle? [\n        if who = (60 + num-turtles) [ pen-down ]\n      ]\n      pentagon\n      hexagon\n      left-circle\n      die\n    ][ set color (who / current-color-sep)\n      if follow-turtle? [\n        if who = (60 + num-turtles) [ pen-down ]\n      ]\n      nine-gon\n      octagon\n      right-circle\n      die\n    ]\n  ]\n\n  if (count turtles + 1) <= max-num [\n    hatch 1 [\n      set new? true\n      set type-a? true\n    ]\n  ]\n  if (count turtles + 1) <= max-num [\n    hatch 1 [\n      set new? true\n      set type-a? false\n    ]\n  ]\nend\n\n; Performs the following procedure 180 times:\n; Move forward 1.5 steps and turn right by 2 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with one turtle with the pen down.\n; A turtle will create a circle heading in the right direction.\nto right-circle    ; turtle procedure\n  repeat 180 [\n    fd 1.5\n    rt 2\n  ]\nend\n\n; Performs the following procedure 180 times:\n; Move forward 1.5 steps and turn left by 2 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with 0one turtle with the pen down.\n; A turtle will create a circle heading in the left direction.\nto left-circle    ; turtle procedure\n  repeat 180 [\n    fd 1.5\n    lt 2\n  ]\nend\n\n; Performs the following procedure 4 times:\n; Move forward EXPANDER steps and turn left by 90 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with one turtle with the pen down.\n; A turtle will create a square heading in the left direction.\nto left-square    ; turtle procedure\n  repeat 4 [\n    fd expander\n    lt 90\n  ]\nend\n\n; Performs the following procedure 3 times:\n; Move forward 35 steps and turn right by 120 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with one turtle with the pen down.\n; A turtle will create a triangle heading in the right direction.\nto right-triangle    ; turtle procedure\n  repeat 3 [\n    fd expander\n    rt 120\n  ]\nend\n\n; Performs the following procedure 8 times:\n; Move forward 30 steps and turn right by 45 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with one turtle with the pen down.\n; A turtle will create an octagon heading in the right direction.\nto octagon    ;;turtle procedure\n  repeat 8 [\n    fd 30\n    lt 45\n  ]\nend\n\n; Performs the following procedure 5 times:\n; Move forward 35 steps and turn right by 72 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with one turtle with the pen down.\n; A turtle will create a pentagon heading in the right direction.\nto pentagon    ; turtle procedure\n  repeat 5 [\n    fd 35\n    rt 72\n  ]\nend\n\n; Performs the following procedure 6 times:\n; Move forward 30 steps and turn right by 60 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with one turtle with the pen down.\n; A turtle will create a hexagon heading in the right direction.\nto hexagon    ; turtle procedure\n  repeat 6 [\n    fd 30\n    rt 60\n  ]\nend\n\n; Performs the following procedure 9 times:\n; Move forward 35 steps and turn right by 40 degrees.\n; To see the shape that this function creates,\n; try calling it in the command center with one turtle with the pen down.\n; A turtle will create a nine-gon heading in the right direction.\nto nine-gon    ; turtle procedure\n  repeat 9 [\n    fd 35\n    lt 40\n  ]\nend\n\n\n; Copyright 1998 Uri Wilensky.\n; See Info tab for full copyright and license.\n',
    [
      'num-turtles',
      'color-sep',
      'follow-turtle?',
      'expander',
      'direction',
      'max-num',
      'shift-direction',
    ],
  ],
  [
    'globals [ curr-color-sep ]   ; spread of the colors in the kaleidoscope\n\n; INITIALIZATION PROCEDURES\nto setup\n  clear-all\n  set-default-shape turtles "circle"\n  ; the patterns assume evenly spaced turtles\n  create-ordered-turtles num-turtles [ pen-down ]\n  set curr-color-sep color-sep\n  reset-ticks\nend\n\n\n; RUN-TIME PROCEDURES\n; First Pattern\n; Turn a bit right, hatch a turtle which draws a circle then dies\nto pattern-1\n  ask turtles [\n    rt 1\n    hatch 1 [\n      set color 5.375 * ((count turtles - 1) / curr-color-sep) + 10\n      right-circle\n      die\n    ]\n  ]\n  every 1 [ if color-shift? [ color-shift ] ]\n  tick\nend\n\n; Second Pattern\n; Half our turtles do Pattern 1; the other half do the same,\n; except mirrored (they turn left circles)\nto pattern-2\n  ask turtles [\n    ifelse (who mod 2) = 0 [\n      rt 1\n      hatch 1 [\n        set color 5.375 * ((count turtles - 1) / curr-color-sep) + 10\n        right-circle\n        die\n      ]\n    ][\n      lt 1\n      hatch 1 [\n        set color 5.375 * ((count turtles - 1) / curr-color-sep) + 10\n        left-circle\n        die\n      ]\n    ]\n  ]\n  every 1 [ if color-shift? [ color-shift ] ]\n  tick\nend\n\n; Spin a circle, clockwise\nto right-circle\n  repeat 36 [\n    fd 4\n    rt 10\n  ]\nend\n\n; Spin a circle, counterclockwise\nto left-circle\n  repeat 36 [\n    fd 4\n    lt 10\n  ]\nend\n\n; Change curr-color-sep, to increase colors or decrease colors\n; and cap the value at the bottom at 1 and at the top at 60\nto color-shift\n  ifelse increase-color? [\n    set curr-color-sep curr-color-sep + random 3\n    if curr-color-sep > 60 [ set curr-color-sep 60 ]\n  ][\n    set curr-color-sep curr-color-sep - random 3\n    if curr-color-sep < 1 [ set curr-color-sep 1 ]\n  ]\nend\n\n\n; Copyright 1998 Uri Wilensky.\n; See Info tab for full copyright and license.\n',
    ['color-sep', 'increase-color?', 'num-turtles', 'color-shift?'],
  ],
  [
    'globals [caption]\n\n;; runs automatically when model is opened\nto startup\n  set caption ""  ;; otherwise it would start out as 0\nend\n\nto illusion-1\n  clear-all\n  set caption "What color are the circles?"\n  set-default-shape turtles "circle"\n  ;; make the gray lines\n  ask patches with [pxcor mod 5 = 0 or\n                    pycor mod 5 = 0]\n    [ set pcolor gray ]\n  ;; make the circles\n  ask patches with [pxcor mod 5 = 0 and\n                    pycor mod 5 = 0]\n    [ sprout 1\n        [ set color white\n          set size 1.7 ] ]\n  display\nend\n\nto illusion-2\n  clear-all\n  set caption "Are the thick lines parallel?"\n  ask patches\n    [ set pcolor white ]\n  ;; make 2 parallel lines\n  ask patches with [abs pycor = 4]\n    [ set pcolor black ]\n  ;; make diagonal lines that start at the center\n  ;; and go to different parts of the world\n  create-turtles 60\n    [ set heading who * 6\n      set color black\n      set shape "line"\n      set size 100 ]\n  ;; make a circle in the center\n  create-turtles 1\n    [ set color black\n      set shape "circle"\n      set size 5 ]\n  display\nend\n\nto illusion-3\n  clear-all\n  set caption "Are the lines parallel?"\n  set-default-shape turtles "square"\n  ask patches\n    [ set pcolor gray ]\n  ;; every fourth patch creates a square, either black or white\n  ask patches with [pxcor mod 4 = 0 and\n                    pycor mod 4 = 0]\n    [ sprout 1\n        [ set heading 0\n          set size 4.8\n          ifelse pxcor mod 8 = 0\n            [ set color white ]\n            [ set color black ] ] ]\n  ;; move every other row over 1 to the right\n  ask turtles with [pycor mod 16 = 4]\n    [ set xcor xcor + 1 ]\n  ;; move every other row over 1 to the left\n  ask turtles with [pycor mod 16 = 12 ]\n    [ set xcor xcor - 1 ]\n  display\nend\n\nto illusion-4\n  clear-all\n  set caption "Which inner circle is bigger?"\n  set-default-shape turtles "circle"\n\n  ;; make right figure\n  let counter 0\n  ask patch -12 0\n    [ ;; middle circle\n      sprout 1\n        [ set color white\n          set size 5\n          ;; 6 smaller circles around the middle circle\n          hatch 6\n            [ set size 2.5\n              set heading 60 * counter\n              fd 4\n              set counter counter + 1 ] ] ]\n  ;; make left figure\n  set counter 0\n  ask patch 6 0\n    [ ;; middle circle\n      sprout 1\n        [ set color white\n          set size 5\n          ;; 6 larger circles around the middle circle\n          hatch 6\n            [ set size 8\n              set heading 60 * counter\n              fd 8\n              set counter counter + 1 ] ] ]\n  display\nend\n\nto illusion-5\n  clear-all\n  set caption "Stare at the dot, then lean forward and back."\n  ask patches\n    [ set pcolor gray ]\n  ;; make the inside circle of diamonds\n  ;; use ordered turtles so the circle is evenly spaced\n  create-ordered-turtles 32\n    [ set size 2\n      set shape "diamond1"\n      fd 12 ]\n  ;; make the outside circle of diamonds\n  ;; use ordered turtles so the circle is evenly spaced\n  create-ordered-turtles 40\n    [ set size 2\n      set shape "diamond2"\n      fd 15 ]\n  ;; make the dot in the middle\n  create-turtles 1\n    [ set shape "circle"\n      set color black ]\n  display\nend\n\nto illusion-6\n  clear-all\n  set caption "Feeling queasy?"\n  ask patches [\n    ;; use RGB colors since ordinary NetLogo colors aren\'t neon enough\n    set pcolor one-of [[30 58 190] [133 10 166]]\n    ;; place turtles only on patches where both coordinates are even\n    if pxcor mod 2 = 0 and pycor mod 2 = 0 [\n      sprout 1 [\n        set color [99 187 64]\n        set shape "lozenge"\n        __set-line-thickness 0.15\n        set size 2\n        ;; make repeating "wave" pattern of headings\n        set heading ((pxcor + pycor) / 3) mod 6 * 30\n      ]\n    ]\n  ]\n  display\nend\n\nto illusion-7\n  clear-all\n  set caption "Spirals or circles?"\n  ask patches [ set pcolor gray ]\n  set-default-shape turtles "square 3"\n  create-ordered-turtles 16 [ fd  4 rt 15 ]\n  create-ordered-turtles 32 [ fd  8 lt 15 ]\n  create-ordered-turtles 46 [ fd 12 rt 15 ]\n  create-ordered-turtles 60 [ fd 16 lt 15 ]\n  ask turtles [\n    set size 1.7\n    ifelse who mod 2 = 0\n    [ set color black ]\n    [ set color white ]\n  ]\n  display\nend\n\n\n; Copyright 2005 Uri Wilensky.\n; See Info tab for full copyright and license.\n',
    [],
  ],
  [
    'extensions [sound]\n\nglobals [\n  selected    ;; lever that is currently selected\n  dragged     ;; lever that is currently being dragged\n]\n\nbreed [levers lever]\nlevers-own [\n  neighbor1 neighbor2  ;; each holds an adjacent lever (or nobody)\n  fixed?               ;; if true, lever only turns, never changes position\n  spin                 ;; -1, 0, or 1\n  len                  ;; this times SCALE slider equals size\n  new-xcor new-ycor    ;; next values for xcor and ycor\n  new-heading          ;; next value for heading\n  xvel yvel            ;; x and y velocities\n]\n\n;;;\n;;; SETUP PROCEDURES\n;;;\n\nto setup-begin\n  clear-all\n  set-default-shape levers "lever"\n  create-ordered-levers num-levers [\n    set heading 180\n    set new-xcor 0\n    set ycor ((who / num-levers) * world-height + min-pycor ) * -0.8\n    set new-ycor ycor\n    set fixed? false\n    set len 0.5\n    set neighbor1 turtle (who - 1)\n    set neighbor2 turtle (who + 1)\n  ]\n  ask lever 0 [ set fixed? true ]\nend\n\nto setup-dangle\n  setup-begin\n  ask turtle (num-levers - 4) [\n    set len len * 2\n    set spin 1\n  ]\n  setup-finish\nend\n\nto setup-finish\n  set selected last sort levers  ;; select last lever\n  ask levers [ lever-display ]\n  reset-ticks\nend\n\nto setup-chaos-tentacle\n  setup-begin\n  ask levers\n    [ set len (num-levers - who) * 0.1\n      set spin (who mod 2) * 2 - 1\n    ]\n  ask first sort levers\n    [ set new-xcor 0\n      set new-ycor 0\n      setxy 0 0\n      set fixed? true\n    ]\n  setup-finish\nend\n\nto setup-crazy-machine\n  setup-begin\n  ask levers\n    [ ; choose random location, in the inner area of the world\n      set new-xcor (random-float 1.6 - 0.8) * max-pxcor\n      set new-ycor (random-float 1.6 - 0.8) * max-pycor\n      setxy new-xcor new-ycor\n      set fixed? (random 5 = 0)\n      set spin one-of [-1 0 1]\n      set len precision (0.5 + 0.5 * random 4) 1\n      lever-display\n    ]\n  setup-finish\nend\n\n;;;\n;;; RUNTIME PROCEDURES\n;;;\n\nto go\n  ask levers [ monitor-mouse ]\n  ask levers [ lever! ]\n  ask levers [ lever-display ]\n  tick\nend\n\nto lever!\n  ifelse self = dragged\n  [ ; if being dragged, then go there the mouse tells you\n    set new-xcor mouse-xcor\n    set new-ycor mouse-ycor\n  ]\n  [\n    if not fixed?\n    [ set xvel (xvel * f) + ((n1x2 - x1) + (n2x1 - x2)) * 0.5\n      set yvel (yvel * f) + ((n1y2 - y1) + (n2y1 - y2)) * 0.5\n      set yvel yvel - g * len\n      set new-xcor xcor + xvel\n      set new-ycor ycor + yvel\n      if abs new-xcor > max-pxcor [ set xvel xvel * -0.99\n                                    set new-xcor max-pxcor * sign new-xcor + xvel\n                                    bonk! ycor ]\n      if abs new-ycor > max-pycor [ set yvel yvel * -0.99\n                                    set new-ycor max-pycor * sign new-ycor + yvel\n                                    bonk! xcor ]\n    ]\n  ]\n  ; calculate new heading of lever\n  ; if node2 of neighbor1 is overlapping center, keep same heading\n  ; otherwise, find heading to hook 2 of neighbor1\n  let a 180 + heading\n  let b heading\n  if distancexy n1x2 n1y2 > 0\n    [ set a 180 + towardsxy n1x2 n1y2 ]\n  ; likewise hook 1 of neighbor2\n  if distancexy n2x1 n2y1 > 0\n    [ set b towardsxy n2x1 n2y1 ]\n  ; use trig to take mean of a and b\n  set new-heading atan (sin a + sin b)\n                       (cos a + cos b)\n                  + spin * spin-speed\nend\n\nto lever-display\n  setxy new-xcor new-ycor\n  set heading new-heading\n  set size 2 * scale * len\n  let -s ""\n  ifelse self = selected\n  [ set -s "-s"\n    let new-label (word "selected: " who " - " (precision len 2) " ")\n    ask patch max-pxcor max-pycor [ set plabel new-label ]\n    set label (word who " - " (precision len 2) " "  " ---->     ")\n  ]\n  [ set label "" ]\n  set shape (word "lever"\n                  ifelse-value fixed? ["-f"] [""]\n                  item (spin + 1) ["-ws" "" "-cw"]\n                  -s)\nend\n\n;; lever procedures; these report the x and y coordinates\n;; of this lever\'s hooks\nto-report x1 report xcor - dx * scale * len end\nto-report y1 report ycor - dy * scale * len end\nto-report x2 report xcor + dx * scale * len end\nto-report y2 report ycor + dy * scale * len end\n\n;; lever procedures; these report the x and y coordinates\n;; of our neighbor\'s hooks. if no neighbor, use own hook.\nto-report n1x1 ifelse neighbor1 = nobody [ report x2 ] [ report [x1] of neighbor1 ] end\nto-report n1y1 ifelse neighbor1 = nobody [ report y2 ] [ report [y1] of neighbor1 ] end\nto-report n1x2 ifelse neighbor1 = nobody [ report x1 ] [ report [x2] of neighbor1 ] end\nto-report n1y2 ifelse neighbor1 = nobody [ report y1 ] [ report [y2] of neighbor1 ] end\nto-report n2x1 ifelse neighbor2 = nobody [ report x2 ] [ report [x1] of neighbor2 ] end\nto-report n2y1 ifelse neighbor2 = nobody [ report y2 ] [ report [y1] of neighbor2 ] end\nto-report n2x2 ifelse neighbor2 = nobody [ report x1 ] [ report [x2] of neighbor2 ] end\nto-report n2y2 ifelse neighbor2 = nobody [ report y1 ] [ report [y2] of neighbor2 ] end\n\nto-report sign [a]\n  ifelse a = 0\n    [ report 0 ]\n    [ ifelse a < 0 [ report -1 ]\n                   [ report 1 ] ]\nend\n\n;;;\n;;; SELECTION & DRAGGING PROCEDURES\n;;;\n\nto monitor-mouse\n  let mouse-here? abs (mouse-xcor - xcor) < scale / 2 and\n                  abs (mouse-ycor - ycor) < scale / 2\n  ifelse mouse-here?\n  [ if color != white [ set color white ] ]\n  [ if color = white  [ set color item (who mod 14) base-colors ] ]\n  ifelse mouse-down?\n  [ if dragged = nobody and mouse-here?\n    [ set dragged self\n      set selected self\n    ]\n  ]\n  [ set dragged nobody ]\nend\n\nto select-lever [which-lever]\n  let new lever (which-lever + [who] of selected)\n  if new != nobody [ set selected new ]\nend\n\n;;;\n;;; SOUND PROCEDURES\n;;;\n\nto bonk! [coordinate]\n  sound:play-note my-instrument (pitch coordinate) 90 0.05\nend\n\nto-report pitch [coordinate]  ;; lever procedure\n  report 16 + round (96 * (coordinate + max-pxcor) / world-width)\nend\n\nto-report my-instrument  ;; lever procedure\n  report item ((who + instrument) mod length sound:instruments)\n              sound:instruments\nend\n\n\n; Copyright 2005 Uri Wilensky. Includes code by James P. Steiner.\n; See Info tab for full copyright and license.\n',
    ['f', 'num-levers', 'scale', 'g', 'spin-speed', 'instrument'],
  ],
];
