; All initialization / setup values are derived from real-world figures.
; I arrived at these values using estimates of resting blood sugar levels
; (80 mg/dL), post-meal blood sugar levels (120 mg/dL), human blood volume
; (5L), daily caloric intake (2000 kcal), average nutrient absorption period
; after a meal (2 hours), and starvation time (3 weeks).  Starting with the
; observations that the model's resting blood sugar level is about 4000 and
; adding glucoses at about 400 per tick raises the stable blood sugar by
; about 1.5 times, it is possible to derive the correspondence between
; glucose particles and mg glucose as well as reasonable meal sizes, the
; correspondence between ticks and seconds, meal lengths, metabolic rates,
; and initial glucose reserves. However, this ideal correspondence results
; in an enormous initial glucose store (10.5 million) and time to starvation
; in the model (105k ticks), so I have scaled the glucose energy density
; correspondence by about 1/25. This means that one tick represents about
; 7 minutes, and one glucose represents about 25 mg of real glucose,
; equivalent to 0.1 kcal. This is a fairly high grain size for both time and
; energy.  This also means that the blood sugar levels in the model are
; unusually high if scaled up to a real person, but most other times,
; relationships, and rates correspond properly to the real world within an
; order of magnitude. Most of the inaccuracies help to mitigate the negative
; effects of the high grain size noted earlier. I also accelerated starvation
; for ease of observation by reducing the initial store of glucose.

globals [
  molecule-size     ; display scaling constant
  hormone-half-life
  hormone-mean-life
  eating?           ; keep track of meal state based on EAT button presses
  eat-time          ; keep track of ongoing meal duration
  total-glucose     ; storage variable to record combined blood and stored glucose
  glucose-baseline  ; average 'normal' number of glucoses in the blood per cell
  meal-size
  meal-length
  metabolic-rate 
  glucose-sensitivity
  insulin-sensitivity 
  glucagon-sensitivity 
]

; Set up different cell breeds.
; We need different cell types to behave differently.
; This is why cells are turtles rather than patches.
breed [ liver-cells liver-cell ]
breed [ pancreatic-cells pancreatic-cell ]

; Set up different molecule breeds
breed [ glucoses glucose ]
breed [ insulins insulin ]
breed [ glucagons glucagon ]

liver-cells-own [ glucose-store ]
insulins-own [ lifetime ]
glucagons-own [ lifetime ]

to setup
  clear-all

  set-default-shape turtles "circle outline"
  set molecule-size 0.25
  set eat-time 0
  set eating? false

  ; These values are calibrated to establish a reasonable correspondence for
  ; energy density and time between the model and the real world system.
  ; See the comment at the top of the file for more information.
  set glucose-baseline 3 ; Controls the normal blood glucose level.
  set hormone-half-life 2 ; Corresponds to 14 minutes, roughly twice insulin.
  set hormone-mean-life hormone-half-life / ln 2 ; From exponential distribution.
  set meal-size 7000 ; Corresponds to about 1/3 of daily caloric intake.
  set meal-length 17 ; Nutrient absorption period. Corresponds to about 2 hours.

  ; Set up organs
  make-liver
  make-pancreas

  let world-area (2 * max-pxcor + 1) * (2 * max-pycor + 1)

  ; Make initial molecules at approximately their stable concentrations.
  create-glucoses world-area * (glucose-baseline + 1) [
    random-position
    set color white
    set size molecule-size
  ]
  ; Hormones typically follow exponential decay, so their lifetimes
  ; are randomly drawn from an exponential distribution. This also
  ; makes the least assumptions, since the exponential distribution
  ; is the maximum-entropy distribution for a fixed, positive mean.
  create-insulins round (world-area / 3) [
    random-position
    set color sky
    set size molecule-size * 2
    set lifetime random-exponential hormone-mean-life
  ]
  create-glucagons round (world-area / 3) [
    random-position
    set color red
    set size molecule-size * 2
    set lifetime random-exponential hormone-mean-life
  ]

  ; keep track of the body's fuel
  set total-glucose (count glucoses) + sum ([glucose-store] of liver-cells)

  reset-ticks
end

to go
  if (total-glucose = 0) [
    user-message "The body ran out of glucose."
    stop
  ]

  ; Keeps track of the EAT button presses
  if eating? [ add-glucose ]

  ; Liver detects hormones and absorbs / releases glucose
  ask liver-cells [ adjust-glucose ]

  ; Pancreas detects glucose and maybe releases insulin / glucagon
  ask pancreatic-cells [ adjust-hormones ]

  metabolize-glucose
  signal-degradation

  ; Ask signals to move
  ask insulins [ move ]
  ask glucagons [ move ]
  ask glucoses [ move ]

  ; Keep track of the body's fuel
  set total-glucose (count glucoses) + sum ([glucose-store] of liver-cells)

  tick
end

;----------- eat button ---------------
; Adds one meal's worth of glucose over the course of the defined meal time.

; Button procedure
; Either starts a new meal or extends a current meal.
to eat
  set eating? true
  set eat-time eat-time + meal-length
end

; Implements eating process. Adds one meal's worth of glucose at
; a constant rate, spread across the whole length of a meal.
to add-glucose
  create-glucoses (meal-size / meal-length) [
    random-position
    set color white
    set size molecule-size
  ]
  set eat-time eat-time - 1
  if eat-time < 1 [ set eating? false ]
end

;------------ setup helpers ---------------

; Particle procedure
; Place molecule at random location
to random-position
  setxy (min-pxcor + random-float (max-pxcor * 2))
        (min-pycor + random-float (max-pycor * 2))
end

; Sets up liver cells
to make-liver
  ask patches with [ pxcor < round (max-pxcor / 2) ] [
    sprout-liver-cells 1 [
      set shape "square 2"
      set color brown + 2
      set glucose-store random-poisson 150 ; Enough to survive for about a week.
    ]
  ]
end

; Sets up pancreatic cells
to make-pancreas
  ask patches with [ pxcor >= round (max-pxcor / 2) ] [
    sprout-pancreatic-cells 1 [
      set shape "square 2"
      set color yellow - 1
    ]
  ]
end

; ----------- signal procedures ------------

; Molecule procedure
to move
  rt random 90
  lt random 90
  fd 1
end

; Observer procedure
to signal-degradation
  ask insulins [
    set lifetime lifetime - 1
    if (lifetime <= 0) [ die ]
  ]
  ask glucagons [
    set lifetime lifetime - 1
    if (lifetime <= 0) [ die ]
  ]
end

; Observer procedure
to metabolize-glucose
  ifelse (count glucoses >= metabolic-rate) [
    ask n-of metabolic-rate glucoses [ die ]
  ] [
    ask glucoses [ die ]
  ]
end

;---------------- cell procedures ---------------
; Both cell types implement signal sensitivity using the binomial distribution.
; In this context, each signal's sensitivity slider directly governs the
; probability that a cell will detect the presence of that signal when it is
; present. Lowering the sensitivity makes cells more likely to miss signals.
; The binomial distribution gives the probability that a cell will detect k signals
; when n signals are present, given a detection probability p for each signal.
; This can be used to produce likely signal counts (or k's) for a cell with n
; signal molecules present and a given signal sensitivity.

; Liver procedure
; Releases or sequesters glucose based on the local hormone concentrations.
to adjust-glucose
  ; Detect hormones according to a binomial distribution based on their sensitivities.
  let insulin-count random-binomial (count insulins-here) insulin-sensitivity
  let glucagon-count random-binomial (count glucagons-here) glucagon-sensitivity

  ; A positive net signal means we release glucose.
  ; The stronger the signal (the larger the absolute value),
  ; the more glucose is released or sequestered.
  let net-signal glucagon-count - insulin-count

  ; If there is more glucagon signal than insulin signal, release glucose.
  if net-signal > 0 [
    ifelse (glucose-store >= net-signal) [
      ; If there is a lot of glucose stored in the cell, hatch new glucose molecules.
      hatch-glucoses net-signal [
        random-position
        set color white
        set size molecule-size
      ]
      ; Account for the change in stored glucose (net-signal > 0).
      set glucose-store glucose-store - net-signal
    ] [
      ; If there is not enough glucose stored in the cell, release as much as possible.
      hatch-glucoses glucose-store [
        random-position
        set color white
        set size molecule-size
      ]
      set glucose-store 0
    ]
  ]
  ; If there is more insulin signal than glucagon signal, sequester glucose.
  if net-signal < 0 [
    ifelse (count glucoses >= abs net-signal) [
      ; If there's a lot of blood glucose, sequester what you need (net-signal < 0).
      set glucose-store glucose-store - net-signal
      ask n-of abs net-signal glucoses [ die ]
    ] [
      ; If there's not ehough blood glucose, sequester as much as possible.
      set glucose-store glucose-store + count glucoses
      ask glucoses [ die ]
    ]
  ]
end

; Pancreas procedure
; Produces hormones according to the local glucose concentration.

; Hormones typically follow exponential decay, so their lifetimes
; are randomly drawn from an exponential distribution. This also
; makes the least assumptions, since the exponential distribution
; is the maximum-entropy distribution for a fixed, positive mean.
to adjust-hormones
  ; Detect glucose according to a binomial distribution based on the sensitivity.
  let glucose-count random-binomial (count glucoses-here) glucose-sensitivity
  ; Signal strength is determined by the difference in concentration from normal.
  let signal-count abs (glucose-baseline - glucose-count)

  ; If there are too few glucoses...
  if (glucose-count < glucose-baseline) [
    ; ...release glucagon molecules.
    hatch-glucagons signal-count [
      random-position
      set color red
      set size molecule-size * 2
      set lifetime random-exponential hormone-mean-life
    ]
  ]
  ; If there are too many glucoses...
  if (glucose-count > glucose-baseline) [
    ; ...release insulin molecules.
    hatch-insulins signal-count [
      random-position
      set color sky
      set size molecule-size * 2
      set lifetime random-exponential hormone-mean-life
    ]
  ]
end

;------------- follow procedures -------------

to follow-glucose
  watch one-of glucoses
end

to follow-insulin
  watch one-of insulins
end

to follow-glucagon
  watch one-of glucagons
end

;---------------- math helpers ----------------

; Returns the outcome of a Bernoulli trial with success probability p.
; Successes are reported as 1 and failures are reported as 0.
to-report random-bernoulli [ p ]
  report ifelse-value random-float 1 < p [1] [0]
end

; Returns a random number according to the binomial distribution with parameters n and p
; where n is the number of trials and p is the probability of success in each trial.
to-report random-binomial [n p]
  if (n < 0) or not (int n = n) [
    error "Input n must be a non-negative integer."
  ]
  if (p < 0) or (p > 1) [
    error "Probability p must be between 0 and 1."
  ]

  ; Sum the number of successes in n Bernoulli trials with success probability p.
  report sum n-values n [random-bernoulli p]
end


; Copyright 2017 Uri Wilensky.
; See Info tab for full copyright and license.