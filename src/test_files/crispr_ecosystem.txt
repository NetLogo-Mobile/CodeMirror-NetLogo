globals [
  food-color                     ; Color of food.
  bacteria-color                 ; Color of bacteria.
  virus-color                    ; Color of viruses.
  bacteria-size                  ; Size of bacteria, also virus scale factor.

  sprout-delay-time              ; Time for food to regrow after being consumed.
  max-food-energy                ; Max amount of food energy per patch.
  min-reproduce-energy           ; Min energy required for bacteria to reproduce.

  food-growth-rate               ; How fast food is replenished on average.
  food-bacteria-eat              ; Amount of food bacteria eat each time step.
  regrowth-variability           ; Adjusts regrowth rates (see replenish-food).

  virus-replication-rate         ; Number of viruses created in a lytic cycle.

  virus-history                  ; Required for plot housekeeping.
                                 ; This can be removed if 1) a primitive to get all
                                 ; current plot pens as a list is added, or 2) a
                                 ; way to remove temporary plot pens without also
                                 ; clearing the plot or that pen's trail is added.
  plot-virus                     ; Required for clean switching on coevolution plot.

  initial-bacteria 
  initial-viruses 
  max-virus-types 
  infection-chance 
  spacer-loss-chance 
  crispr? 
  plotted-virus
]

breed [ foods food ]
breed [ bacteria bacterium ]
breed [ viruses virus ]

viruses-own [ sequence ]
bacteria-own [ energy array ]

patches-own [ food-energy countdown ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; SETUP PROCEDURES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup
  clear-all

  set food-color     [90 140 90 150]
  set bacteria-color  orange
  set virus-color     violet

  set-default-shape bacteria "bacteria"
  set-default-shape viruses  "virus"
  set-default-shape foods    "food"

  set bacteria-size 1

  set min-reproduce-energy 100
  set sprout-delay-time 25
  set max-food-energy 100
  set food-bacteria-eat 25
  set food-growth-rate 25
  set regrowth-variability 1

  set virus-replication-rate 20

  setup-world
  setup-virus-plot
  reset-ticks
end

to setup-world
  ask patches [
    set food-energy max-food-energy / 2
    set countdown 0
    ; Make patches blue (water colored) and hatch food in water spots
    set pcolor [180 200 230]
    sprout-foods 1 [ set color food-color ]
  ]

  ask patches [ grow-food ]

  create-bacteria initial-bacteria [
    set size bacteria-size
    set color bacteria-color
    set energy random-normal (min-reproduce-energy / 2) (min-reproduce-energy / 10)
    set array []
    random-position
  ]
  create-viruses initial-viruses [
    set size bacteria-size / 2
    set color virus-color
    set sequence random max-virus-types
    random-position
  ]
end

to random-position
  setxy (min-pxcor + random-float (max-pxcor * 2))
        (min-pycor + random-float (max-pycor * 2))
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; RUNTIME PROCEDURES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to go
  if count bacteria < 1 [ stop ]
  if count viruses < 1 [ stop ]
  bacteria-live
  viruses-live
  ask patches [ replenish-food ]
  update-virus-plot
  tick
end

;----------------------------- BACTERIA PROCEDURES -----------------------------

to bacteria-live
  ask bacteria [
    move-bacteria
    bacteria-eat-food
    reproduce-bacteria
    spacer-loss
    if (energy <= 0 ) [ die ]
  ]
end

to move-bacteria ; Bacteria procedure
  set energy (energy - 1)  ; Bacteria lose energy as they move
  rt random-float 90
  lt random-float 90
  fd 0.25  ; The lower the speed, the less severe the population oscillations are.
end

to bacteria-eat-food ; Bacteria procedure
  ; If there is enough food on this patch, the bacteria eat it and gain energy.
  if food-energy > food-bacteria-eat [
    ; Bacteria gain 1/5 the energy of the food they eat (trophic level assumption)
    set food-energy (food-energy - food-bacteria-eat)
    set energy energy + food-bacteria-eat / 5  ; bacteria gain energy by eating
  ]
  ; If all the food is consumed in a patch, set the countdown timer
  ; to delay when the food will grow back in this patch.
  if food-energy <= food-bacteria-eat [ set countdown sprout-delay-time ]
end

to reproduce-bacteria ; Bacteria procedure
 if (energy >  min-reproduce-energy) [
    set energy (energy / 2)  ; Parent keeps half the cell's energy
    ; Variable inheritance gives the daughter half the cell's energy too
    hatch 1 [
      rt random 360
      fd 0.25
    ]
  ]
end

to spacer-loss ; Bacteria procedure
  if not empty? array and random-float 100 < spacer-loss-chance [
    ; Spacers loss is FIFO and we add to the front of the array.
    set array but-last array
  ]
end

;------------------------------ VIRUS PROCEDURES -------------------------------

to viruses-live
  ask viruses [
    move-virus
    infect
    maybe-degrade
  ]
end

to move-virus
  rt random-float 90
  lt random-float 90
  fd 0.10
end

to infect
  let target one-of bacteria-here
  if (target != nobody) and (random-float 100 < infection-chance) [
    ifelse crispr? [
      ; If the bacteria have functioning CRISPR systems...
      ifelse member? sequence ([ array ] of target) [
        ; If the bacterium has the viral sequence in its CRISPR array,
        ; there is a very large chance that the virus dies.
        let succeed-chance 8 ; % chance the virus kills the bacterium and replicates
        let degrade-chance 83 ; % chance the virus gets cleaved or degraded
        let add-chance 9     ; % chance the virus gets caught and added to the array
        let random-roll random-float (succeed-chance + degrade-chance + add-chance)
        (ifelse
          ; Sometimes the virus will successfully reproduce.
          random-roll < succeed-chance [ replicate target ]
          ; Sometimes the bacterium will catch the virus and degrade it.
          random-roll < succeed-chance + degrade-chance [ die ]
          [ ask target [ set array fput [sequence] of myself array ] die ])
      ] [
        ; If the virus isn't in the CRISPR array, it can still get caught.
        ; New chances after reducing dimer production:
        let succeed-chance 30 ; % chance the virus kills the bacterium and replicates
        let degrade-chance 55 ; % chance the virus gets cleaved or degraded
        let add-chance 15     ; % chance the virus gets caught and added to the array
        let random-roll random-float (succeed-chance + degrade-chance + add-chance)
        (ifelse
          ; Sometimes the virus will successfully reproduce.
          random-roll < succeed-chance [ replicate target ]
          ; Sometimes the bacterium will catch the virus and degrade it.
          random-roll < succeed-chance + degrade-chance [ die ]
          [ ask target [ set array fput [sequence] of myself array ] die ])
      ]
    ] [
      ; If the bacteria do not have functioning CRISPR systems, the bacteria
      ; still have non-specific antiviral defenses that may help.
      let succeed-chance 50 ; % chance the virus kills the bacterium and replicates
      let degrade-chance 50 ; % chance the virus gets cleaved or degraded
      let random-roll random-float (succeed-chance + degrade-chance)
      (ifelse
        ; Sometimes the bacterium will catch the virus and degrade it.
        random-roll < degrade-chance [ die ] [ replicate target ])
    ]
  ]
end

to replicate [ host ]
  ask host [ die ]
  ; Small chance viruses will mutate when they replicate
  ; As long as sequence is a random int, there is a ~5% chance of mutation
  if random-float 1 < 0.05 [ set sequence random max-virus-types ]
  ; Since the initial virus doesn't die in the model but would IRL, subtract 1.
  hatch virus-replication-rate - 1
end


to maybe-degrade
  if random-float 100 < 1 [ die ]
end

;------------------------------ FOOD PROCEDURES -------------------------------

; Food replenishes every time step (e.g. photosynthesis, etc.)
to replenish-food
  ; To change resource restoration variability do the following:
  ; In setup, set regrowth-variability n
  ; - 1/n chance to regrow this tick
  ; - n times as much regrowth as normal when it happens
  set countdown (countdown - 1)
  ; Fertile patches gain 1 energy unit per turn, up to max-food-energy threshold
  if countdown <= 0 and random regrowth-variability = 0 [
    set food-energy (food-energy + food-growth-rate * regrowth-variability / 10)
    if food-energy > max-food-energy [ set food-energy max-food-energy ]
  ]
  if food-energy < 0 [
    set food-energy 0
    set countdown sprout-delay-time
  ]
  grow-food
end

; Adjust the size of the food to reflect how much food is in that patch
to grow-food
  ask foods-here [
    ifelse food-energy >= 5 [
      set size (food-energy / max-food-energy)
    ] [
      set size (5 / max-food-energy)
    ]
  ]
end

;------------------------------ PLOT PROCEDURES --------------------------------

to setup-virus-plot ; Observer procedure
  set plot-virus plotted-virus
  set-current-plot "Virus Relative Abundance"
  ; Record each existing virus type.
  set virus-history remove-duplicates [sequence] of viruses
  ; Create pens for each existing virus type.
  foreach virus-history [ seq ->
    ; Cast the sequence to a string and use that as the pen's name.
    create-temporary-plot-pen word seq ""
    set-plot-pen-color one-of base-colors + one-of [-2 0 2]
    plotxy 0 (100 * (count viruses with [sequence = seq]) / (max list 1 count viruses))
  ]
end

to update-virus-plot
  set-current-plot "Virus Relative Abundance"
  ; Record any new viruses that may have arisen from mutation.
  set virus-history remove-duplicates sentence ([sequence] of viruses) virus-history
  foreach virus-history [ seq ->
    ; Cast the sequence to a string and use that as the pen's name.
    let pen-name word seq ""
    ; Switch to that pen if it exists, create a new one if it doesn't.
    ifelse plot-pen-exists? pen-name [
      set-current-plot-pen pen-name
    ] [
      create-temporary-plot-pen pen-name
      set-plot-pen-color one-of base-colors + one-of [-2 0 2]
    ]
    ; After setting the appropriate pen as current, plot the next point.
    plotxy (ticks + 1) (100 * (count viruses with [sequence = seq]) / (max list 1 count viruses))
  ]
end

; Called in the 'Plot update commands' block of the histogram plots.
; Adjusts the x and y ranges of the histogram dynamically based on the input data.
to update-histogram-ranges [ input-list interval ]
  ; If the input list is empty, let the plot use its default ranges.
  ; Otherwise, adjust the plot axis ranges to fit the input data.
  if not empty? input-list [
    ; Adjust the x range to include the whole input data set.
    ; The x range expands with the data, but never contracts.
    let plot-upper-bound max list plot-x-max (interval + max input-list)
    let plot-lower-bound min list plot-x-min min input-list
    set-plot-x-range plot-lower-bound plot-upper-bound

    ; Adjust the y range based on the input data, avoiding constant shifts.
    ; Find the max bar height using the mode(s) of the input data.
    let list-modes-unique modes input-list
    let list-modes-enumerated filter [ i -> member? i list-modes-unique ] input-list
    let max-bar-height (length list-modes-enumerated) / (length list-modes-unique)
    ; The y range should be about 150% of the max bar height, within a tolerance.
    let grow-threshold ceiling (1.05 * max-bar-height)  ; Bar > 95% of the y max
    let shrink-threshold floor (2 * max-bar-height)     ; Bar < 50% of the y max
    if (plot-y-max <= grow-threshold) or (plot-y-max >= shrink-threshold) [
      set-plot-y-range 0 ceiling (1.5 * max-bar-height) ; Bar = 67% of the y max
    ]
  ]
end


; Copyright 2019 Uri Wilensky.
; See Info tab for full copyright and license.