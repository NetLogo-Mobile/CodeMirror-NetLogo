@precedence {
  leftArgs @left,
  lastArgs @left,
  exponent @right,
  times @left,
  plus @left,
  comparative @left,
  
  open @left,
  close @left
}

@top Program { 
  (globalStatement | Unrecognized)*
  Procedure*
}

@detectDelim

@skip { space | LineComment }

Unrecognized {
  expression
}

globalStatement {
  Extensions { ExtensionStr OpenBracket Extension* CloseBracket } |

  Globals { GlobalStr OpenBracket Identifier* CloseBracket  } |

  Breed { BreedDeclarative OpenBracket BreedPlural BreedSingular CloseBracket } |

  BreedsOwn {
    Own OpenBracket Identifier* CloseBracket
  }
}

BreedDeclarative {
  BreedStr | BreedToken
}

BreedSingular {
  Identifier | SpecialReporter1Args
}

BreedPlural {
  Identifier | SpecialReporter1Args
}

BreedVars {
  Identifier | BreedFirst | BreedMiddle | BreedLast
}

Procedure {
  To ProcedureName Arguments? ProcedureContent* End
}

ProcedureName {
  Identifier | 
  SpecialCommand | 
  SpecialReporter0Args |
  SpecialReporter1Args |
  SpecialReporter2Args |
  SpecialReporter3Args |
  SpecialReporter4Args |
  SpecialReporter5Args |
  SpecialReporter6Args |
  SpecialReporter1ArgsBoth |
  SpecialReporter0ArgsLink |
  SpecialReporter1ArgsLink |
  SpecialReporter2ArgsTurtle |
  SpecialReporter0ArgsTurtle |
  SpecialReporter1ArgsTurtle |
  SpecialReporter0ArgsLinkP |
  SpecialCommand0Args |
  SpecialCommand1Args |
  SpecialCommand2Args |
  SpecialCommand3Args |
  SpecialCommand4Args |
  SpecialCommand5Args |
  SpecialCommand6Args |
  SpecialCommandCreateTurtle |
  SpecialCommandCreateLink
}

Arguments {
  OpenBracket Identifier* ~statement CloseBracket 
}

ProcedureContent {
  CommandStatement |
  OpenParen CommandStatement CloseParen
}

ReporterContent {
  ReporterStatement |
  OpenParen ReporterStatement !close CloseParen
}

AnonArguments {
  Arguments | Identifier* ~statement
}

AnonymousProcedure {
  OpenBracket AnonArguments Arrow (ProcedureContent*|ReporterContent*) CloseBracket
}

VariableDeclaration {
  NewVariableDeclaration |
  SetVariable
}

NewVariableDeclaration {
  Let Identifier Value
}

SetVariable {
  Set VariableName Value
}

VariableName {
  Identifier | 
  PatchVar | 
  TurtleVar | 
  LinkVar |
  BreedToken
}

Value {
  OpenParen Value CloseParen |
  String |
  Constant |
  ReporterStatement |
  VariableName |
  List |
  Numeric |
  AnonymousProcedure
}

Literal {
  Numeric |
  String |
  Constant
}

List {
  OpenBracket Literal* CloseBracket ~statement
}

CodeBlock {
  OpenBracket ProcedureContent* CloseBracket ~statement
}

ReporterBlock {
  OpenBracket ReporterContent CloseBracket
}

Property {
  OpenBracket VariableName CloseBracket
}

ReporterStatement { 
  Arg !leftArgs ReporterLeft1Args !lastArgs Arg+ |
  Arg !leftArgs ReporterLeft2Args Arg !lastArgs Arg+ |
  (SpecialReporter0Args | SpecialReporter0ArgsLink | SpecialReporter0ArgsTurtle | SpecialReporter0ArgsLinkP) !lastArgs Arg* ~statement |
  (SpecialReporter1Args | SpecialReporter1ArgsTurtle | SpecialReporter1ArgsLink | SpecialReporter1ArgsBoth) !lastArgs Arg+ |
  (SpecialReporter2Args | SpecialReporter2ArgsTurtle) Arg !lastArgs Arg+ |
  SpecialReporter3Args Arg Arg !lastArgs Arg+ |
  SpecialReporter4Args Arg Arg Arg !lastArgs Arg+ |
  SpecialReporter5Args Arg Arg Arg Arg !lastArgs Arg+ |
  SpecialReporter6Args Arg Arg Arg Arg Arg !lastArgs Arg+ |
  (Reporter0Args | Reporter0ArgsVar) !lastArgs Arg* ~statement |
  (Reporter1Args | Reporter1ArgsVar) !lastArgs Arg+ |
  (Reporter2Args | Reporter2ArgsVar) Arg !lastArgs Arg+ |
  (Reporter3Args | Reporter3ArgsVar) Arg Arg !lastArgs Arg+ |
  (Reporter4Args | Reporter4ArgsVar) Arg Arg Arg !lastArgs Arg+ |
  (Reporter5Args | Reporter5ArgsVar) Arg Arg Arg Arg !lastArgs Arg+ |
  (Reporter6Args | Reporter6ArgsVar) Arg Arg Arg Arg Arg !lastArgs Arg+ |
  OpenParen Reporter0ArgsVar Arg* !close CloseParen |
  OpenParen Reporter1ArgsVar Arg+ !close CloseParen |
  OpenParen Reporter2ArgsVar Arg Arg+ !close CloseParen |
  OpenParen Reporter3ArgsVar Arg Arg Arg+ !close CloseParen |
  OpenParen Reporter4ArgsVar Arg Arg Arg Arg+ !close CloseParen |
  OpenParen Reporter5ArgsVar Arg Arg Arg Arg Arg+ !close CloseParen |
  OpenParen Reporter6ArgsVar Arg Arg Arg Arg Arg Arg+ !close CloseParen |
  Arg !comparative AndOr Arg
}

CommandStatement {
  SpecialCommand0Args !lastArgs Arg* ~statement |
  SpecialCommand1Args !lastArgs Arg+ |
  SpecialCommand2Args Arg !lastArgs Arg+ |
  SpecialCommand3Args Arg Arg !lastArgs Arg+ |
  SpecialCommand4Args Arg Arg Arg !lastArgs Arg+ |
  SpecialCommand5Args Arg Arg Arg Arg !lastArgs Arg+ |
  SpecialCommand6Args Arg Arg Arg Arg Arg !lastArgs Arg+ |
  SpecialCommandCreateTurtle !lastArgs Arg+ |
  SpecialCommandCreateTurtle Arg !lastArgs Arg+ |
  SpecialCommandCreateLink !lastArgs Arg+ |
  SpecialCommandCreateLink Arg !lastArgs Arg+ |
  (Command0Args | Command0ArgsVar) !lastArgs Arg* ~statement |
  (Command1Args | Command1ArgsVar) !lastArgs Arg+ |
  (Command2Args | Command2ArgsVar) Arg !lastArgs Arg+ |
  (Command3Args | Command3ArgsVar) Arg Arg !lastArgs Arg+ |
  (Command4Args | Command4ArgsVar) Arg Arg Arg !lastArgs Arg+ |
  (Command5Args | Command5ArgsVar) Arg Arg Arg Arg !lastArgs Arg+ |
  (Command6Args | Command6ArgsVar) Arg Arg Arg Arg Arg !lastArgs Arg+ |
  OpenParen Command0ArgsVar Arg* !close CloseParen|
  OpenParen Command1ArgsVar Arg+ !close CloseParen |
  OpenParen Command2ArgsVar Arg Arg+ !close CloseParen |
  OpenParen Command3ArgsVar Arg Arg Arg+ !close CloseParen |
  OpenParen Command4ArgsVar Arg Arg Arg Arg+ !close CloseParen |
  OpenParen Command5ArgsVar Arg Arg Arg Arg Arg+ !close CloseParen |
  OpenParen Command6ArgsVar Arg Arg Arg Arg Arg Arg+ !close CloseParen |
  VariableDeclaration |
  Unsupported
}

Arg {  
  CodeBlock | 
  Value ~statement |
  ReporterBlock |
  Property
}

CommandReporter {
  SpecialCommand | 
  SpecialReporter0Args ~statement |
  SpecialReporter1Args |
  SpecialReporter2Args |
  SpecialReporter3Args |
  SpecialReporter4Args |
  SpecialReporter5Args |
  SpecialReporter6Args |
  SpecialReporter1ArgsBoth |
  SpecialReporter0ArgsLink ~statement |
  SpecialReporter1ArgsLink |
  SpecialReporter2ArgsTurtle |
  SpecialReporter0ArgsTurtle ~statement |
  SpecialReporter1ArgsTurtle |
  SpecialReporter0ArgsLinkP ~statement |
  SpecialCommand0Args ~statement |
  SpecialCommand1Args |
  SpecialCommand2Args |
  SpecialCommand3Args |
  SpecialCommand4Args |
  SpecialCommand5Args |
  SpecialCommand6Args |
  SpecialCommandCreateTurtle |
  SpecialCommandCreateLink |
  Reporter0Args ~statement |
  Reporter1Args |
  Reporter2Args |
  Reporter3Args |
  Reporter4Args |
  Reporter5Args |
  Reporter6Args |
  Command0Args ~statement |
  Command1Args |
  Command2Args |
  Command3Args |
  Command4Args |
  Command5Args |
  Command6Args |
  Reporter0ArgsVar ~statement |
  Reporter1ArgsVar |
  Reporter2ArgsVar |
  Reporter3ArgsVar |
  Reporter4ArgsVar |
  Reporter5ArgsVar |
  Reporter6ArgsVar |
  Command0ArgsVar ~statement |
  Command1ArgsVar |
  Command2ArgsVar |
  Command3ArgsVar |
  Command4ArgsVar |
  Command5ArgsVar |
  Command6ArgsVar
}

@tokens {

  MultiplyDivide {"*" |"/"}

  Exponent {"^"}

  Numeric { $[-]? $[0-9]+ $[\.]? $[0-9]* ($[e] ($[+] | $[-])? $[0-9]+)? | $[-]? $[\.] $[0-9]+ ($[e] ($[+] | $[-])? $[0-9]+)?}
  
  String { '"' (!["\\] | "\\" _)* '"' }

  LineComment { ";" ![\n]* }

  space { $[ \t\n\r]+ }
  
  OpenBracket { "[" }
  
  CloseBracket { "]" }

  Arrow { "->" }

  Comparative { "=" | "!=" | ">" | "<" | "<=" | ">="}

  OpenParen { "(" }

  CloseParen { ")" }

  "[" "]"
}

expression {
  OpenParen expression CloseParen |
  Identifier |
  Command |
  Reporter |
  Numeric |
  String |
  Constant |
  TurtleVar |
  PatchVar |
  LinkVar |
  Unsupported
}

@external tokens keyword from "./tokenizer.js" { 
  ReporterLeft1Args,
  ReporterLeft2Args,  
  GlobalStr, 
  ExtensionStr, 
  BreedStr, 
  PlusMinus,
  Own, 
  Set, 
  Let, 
  To, 
  End, 
  And,
  Or,
  Identifier, 
  Directive,
  Command, 
  Reporter, 
  Extension, 
  TurtleVar, 
  PatchVar, 
  LinkVar, 
  Constant, 
  Unsupported,
  SpecialReporter,
  SpecialCommand,
  BreedToken,
  AndOr
}

@external specialize {Reporter} specializeReporter from './specializer' {
  Reporter0Args,
  Reporter1Args, 
  Reporter2Args, 
  Reporter3Args, 
  Reporter4Args,
  Reporter5Args,
  Reporter6Args,
  Reporter0ArgsVar,
  Reporter1ArgsVar, 
  Reporter2ArgsVar, 
  Reporter3ArgsVar, 
  Reporter4ArgsVar,
  Reporter5ArgsVar,
  Reporter6ArgsVar
}

@external specialize {SpecialReporter} specializeSpecialReporter from './specializer' {
  SpecialReporter0Args,
  SpecialReporter1Args,
  SpecialReporter2Args,
  SpecialReporter3Args,
  SpecialReporter4Args,
  SpecialReporter5Args,
  SpecialReporter6Args,
  SpecialReporter1ArgsBoth,
  SpecialReporter0ArgsLink,
  SpecialReporter1ArgsLink,
  SpecialReporter2ArgsTurtle,
  SpecialReporter0ArgsTurtle,
  SpecialReporter1ArgsTurtle,
  SpecialReporter0ArgsLinkP
}

@external specialize {Command} specializeCommand from './specializer' {
  Command0Args,
  Command1Args, 
  Command2Args, 
  Command3Args, 
  Command4Args,
  Command5Args,
  Command6Args,
  Command0ArgsVar,
  Command1ArgsVar, 
  Command2ArgsVar, 
  Command3ArgsVar, 
  Command4ArgsVar,
  Command5ArgsVar,
  Command6ArgsVar
}

@external specialize {SpecialCommand} specializeSpecialCommand from './specializer' {
  SpecialCommand0Args,
  SpecialCommand1Args,
  SpecialCommand2Args,
  SpecialCommand3Args,
  SpecialCommand4Args,
  SpecialCommand5Args,
  SpecialCommand6Args,
  SpecialCommandCreateTurtle,
  SpecialCommandCreateLink
}