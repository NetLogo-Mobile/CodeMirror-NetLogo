@precedence {
  operation @left,
  open @left
}

@top Program { 
  (globalStatement | Unrecognized)*
  Procedure*
}

@detectDelim

@skip { space | LineComment }

Unrecognized {
  expression
}

globalStatement {
  Extensions { ExtensionStr OpenBracket Extension* CloseBracket } |

  Globals { GlobalStr OpenBracket  Identifier* CloseBracket  } |

  Breed { BreedStr OpenBracket Identifier Identifier CloseBracket } |

  BreedsOwn {
    Own OpenBracket Identifier* CloseBracket
  }
}

Procedure {
  To ProcedureName Arguments? ProcedureContent* End
}

ProcedureName {
  Identifier | BreedProceduresReporters
}

Arguments {
  OpenBracket Identifier* CloseBracket
}

ProcedureContent {
  VariableDeclaration | 
  Primitive |
  BreedProceduresReporters | 
  Conditional |
  expression
}

AnonArguments{
  Arguments | Identifier
}

AnonymousProcedure {
  OpenBracket AnonArguments "->" ProcedureContent* CloseBracket
}

VariableDeclaration {
  NewVariableDeclaration |
  SetVariable
}

NewVariableDeclaration {
  Let Identifier Value
}

SetVariable {
  Set VariableName Value
}

VariableName {
  Identifier | PatchVar | TurtleVar | LinkVar
}

Value {
  Reporter
  Calculation |
  String |
  OpenBracket Value* CloseBracket 
}

NumericValue {
  Constant |
  Numeric |
  VariableName |
  OpenBracket VariableName !open CloseBracket "of" Identifier
}

Primitive {
  ValFirstPrimitive Value Reporters |
  ValLastPrimitive Reporters Value
}

Reporters {
  Reporter | AnonymousProcedure
}

BreedProceduresReporters {
  BreedFirst | BreedMiddle | BreedLast
}

Calculation {
  NumericValue |
  Calculation !operation Operation Calculation |
  "(" Calculation ")"
}

Boolean {
  Value !operation Comparative Value |
  "(" Boolean ")" |
  Boolean !operation And Boolean |
  Boolean !operation Or Boolean
}

Conditional {
  "if" Boolean OpenBracket ProcedureContent* CloseBracket |
  "ifelse" Boolean OpenBracket ProcedureContent* CloseBracket OpenBracket ProcedureContent* CloseBracket
}

@tokens {
  Numeric { $[0-9]+ $[\.]? $[0-9]* }
  
  String { '"' (!["\\] | "\\" _)* '"' }

  LineComment { ";" ![\n]* }

  Operation {
    "+" | "-" | "/" | "*" | "^"
  }

  Comparative {
    "=" | "!=" | "<" | ">" | "<=" | ">="
  }

  space { $[ \t\n\r]+ }
  
  OpenBracket { "[" }
  
  CloseBracket { "]" }

  "[" "]"
}

expression {
  "(" expression ")" |
  Identifier |
  Command |
  Reporter |
  Numeric |
  String |
  Constant |
  TurtleVar |
  PatchVar |
  LinkVar |
  Unsupported
}

@external tokens keyword from "./tokenizer.js" { And, Or, GlobalStr, ExtensionStr, BreedStr, BreedFirst, BreedLast, BreedMiddle, Own, Set, Let, To, End, ValFirstPrimitive, ValLastPrimitive, Identifier, Directive, Command, Reporter, Extension, TurtleVar, PatchVar, LinkVar, Constant, Unsupported }