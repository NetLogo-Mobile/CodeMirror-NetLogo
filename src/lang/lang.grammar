@precedence {
  operation @left,
  open @left
}

@top Program { 
  (globalStatement | Unrecognized)*
  Procedure*
}

@detectDelim

@skip { space | LineComment }

Unrecognized {
  expression
}

globalStatement {
  Extensions { ExtensionStr OpenBracket Extension* CloseBracket } |

  Globals { GlobalStr OpenBracket  Identifier* CloseBracket  } |

  Breed { BreedStr OpenBracket Identifier Identifier CloseBracket } |

  BreedsOwn {
    Own OpenBracket Identifier* CloseBracket
  }
}

Procedure {
  To ProcedureName Arguments? ProcedureContent* End
}

ProcedureName {
  Identifier | BreedProceduresReporters
}

Arguments {
  OpenBracket Identifier* CloseBracket
}

ProcedureContent {
  VariableDeclaration | 
  BreedProceduresReporters | 
  Commands |
  Reporters ~statement|
  Identifier
}

AnonArguments{
  Arguments | Identifier
}

AnonymousProcedure {
  OpenBracket AnonArguments "->" ProcedureContent* CloseBracket
}

VariableDeclaration {
  NewVariableDeclaration |
  SetVariable
}

NewVariableDeclaration {
  Let Identifier Boolean
}

SetVariable {
  Set VariableName Boolean
}

VariableName {
  !operation Identifier | 
  !operation PatchVar | 
  !operation TurtleVar | 
  !operation LinkVar
}

Value {
  Reporters ~statement |
  String |
  Constant |
  VariableName |
  List |
  Numeric |
  Property
}

List {
  OpenBracket Value* CloseBracket ~statement  
}

Property {
  OpenBracket VariableName !operation CloseBracket "of" Identifier
}

Reporters {
  !operation Reporter | 
  Arg !operation Reporter11Args Arg |
  !operation Reporter0Args |
  !operation Reporter1Args Arg |
  !operation Reporter2Args Arg Arg |
  !operation Reporter3Args Arg Arg Arg |
  !operation Reporter4Args Arg Arg Arg Arg
}

Commands {
  Command |
  Command0Args |
  Command1Args Arg |
  Command2Args Arg Arg |
  Command3Args Arg Arg Arg |
  Command4Args Arg Arg Arg Arg
}

Arg {   
  Boolean ~statement |
  AnonymousProcedure |
  VariableName ~statement | 
  Commands |
  OpenBracket ProcedureContent+ CloseBracket |
  Value ~statement
}

BreedProceduresReporters {
  BreedFirst | BreedMiddle | BreedLast
}


Boolean {
  Value ~statement |
  "(" Boolean ")" |
  Reporters
}

@tokens {
  Numeric { $[-]? $[0-9]+ $[\.]? $[0-9]* }
  
  String { '"' (!["\\] | "\\" _)* '"' }

  LineComment { ";" ![\n]* }

  space { $[ \t\n\r]+ }
  
  OpenBracket { "[" }
  
  CloseBracket { "]" }

  "[" "]"
}

expression {
  "(" expression ")" |
  Identifier |
  Command |
  Reporter |
  Numeric |
  String |
  Constant |
  TurtleVar |
  PatchVar |
  LinkVar |
  Unsupported
}

@external tokens keyword from "./tokenizer.js" { 
  Command0Args,
  Command1Args, 
  Command2Args, 
  Command3Args, 
  Command4Args, 
  Reporter11Args,
  Reporter0Args,
  Reporter1Args, 
  Reporter2Args, 
  Reporter3Args, 
  Reporter4Args, 
  GlobalStr, 
  ExtensionStr, 
  BreedStr, 
  BreedFirst, 
  BreedLast, 
  BreedMiddle, 
  Own, 
  Set, 
  Let, 
  To, 
  End, 
  Identifier, 
  Directive, 
  Command, 
  Reporter, 
  Extension, 
  TurtleVar, 
  PatchVar, 
  LinkVar, 
  Constant, 
  Unsupported
}