@precedence {
  exponent @right,
  times @left,
  plus @left,
  comparative @left,
  leftArgs @left,
  open @left
}

@top Program { 
  (globalStatement | Unrecognized)*
  Procedure*
}

@detectDelim

@skip { space | LineComment }

Unrecognized {
  expression
}

globalStatement {
  Extensions { ExtensionStr OpenBracket Extension* CloseBracket } |

  Globals { GlobalStr OpenBracket  Identifier* CloseBracket  } |

  Breed { BreedStr OpenBracket Identifier Identifier CloseBracket } |

  BreedsOwn {
    Own OpenBracket Identifier* CloseBracket
  }
}

Procedure {
  To ProcedureName Arguments? ProcedureContent* End
}

ProcedureName {
  Identifier | BreedProceduresReporters
}

Arguments {
  OpenBracket Identifier* ~statement CloseBracket 
}

ProcedureContent {
  CommandStatement
}

AnonArguments {
  Arguments | Identifier
}

AnonymousProcedure {
  OpenBracket AnonArguments "->" ProcedureContent* CloseBracket
}

VariableDeclaration {
  NewVariableDeclaration |
  SetVariable
}

NewVariableDeclaration {
  Let Identifier Value
}

SetVariable {
  Set VariableName Value
}

VariableName {
  Identifier | 
  PatchVar | 
  TurtleVar | 
  LinkVar
}

Value {
  "(" Value ")" |
  Reporters ~statement |
  String |
  Constant |
  VariableName |
  List |
  Numeric
}

Literal {
  Numeric |
  String |
  Constant
}

List {
  OpenBracket Literal+ CloseBracket 
}

CodeBlock {
  OpenBracket ProcedureContent* CloseBracket
}

Reporters {
  Reporter | 
  Operation |
  Arg !leftArgs ReporterLeftArgs Arg |
  ReportersAll |
  Reporter0Args |
  Reporter1Args Arg |
  Reporter2Args Arg Arg |
  Reporter3Args Arg Arg Arg |
  Reporter4Args Arg Arg Arg Arg
}

CommandStatement {
  Command Arg* |
  VariableDeclaration
}

Operation {
  Value !plus "+" Value |
  Value !plus Minus Value |
  Value !times "*" Value |
  Value !times "/" Value |
  Value !exponent "^" Value |
  Value !comparative "=" Value |
  Value !comparative "!=" Value |
  Value !comparative ">" Value |
  Value !comparative "<" Value |
  Value !comparative "<=" Value |
  Value !comparative ">=" Value |
  Value !comparative And Value |
  Value !comparative Or Value |
  Minus Value
}

Arg {   
  AnonymousProcedure |
  CodeBlock | 
  Value ~statement
}

BreedProceduresReporters {
  BreedFirst | BreedMiddle | BreedLast
}


@tokens {

  Minus { "-" }

  Numeric { $[0-9]+ $[\.]? $[0-9]* }
  
  String { '"' (!["\\] | "\\" _)* '"' }

  LineComment { ";" ![\n]* }

  space { $[ \t\n\r]+ }
  
  OpenBracket { "[" }
  
  CloseBracket { "]" }

  "[" "]"
}

expression {
  "(" expression ")" |
  Identifier |
  Command |
  Reporter |
  Numeric |
  String |
  Constant |
  TurtleVar |
  PatchVar |
  LinkVar |
  Unsupported
}

@external tokens keyword from "./tokenizer.js" { 
  ReporterLeftArgs,
  Reporter0Args,
  Reporter1Args, 
  Reporter2Args, 
  Reporter3Args, 
  Reporter4Args, 
  GlobalStr, 
  ExtensionStr, 
  BreedStr, 
  BreedFirst, 
  BreedLast, 
  BreedMiddle, 
  Own, 
  Set, 
  Let, 
  To, 
  End, 
  And,
  Or
  Identifier, 
  Directive,
  Command, 
  Reporter, 
  Extension, 
  TurtleVar, 
  PatchVar, 
  LinkVar, 
  Constant, 
  Unsupported
}

@external specialize {Reporter} specializeReporter from './specializer' {
  ReportersAll
}